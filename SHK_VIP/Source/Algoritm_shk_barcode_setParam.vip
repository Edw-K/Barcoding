/*************************************************************************************************\

  Наименование:
  Контур/Модуль:
  Примечание:
  Вид работы  |Номер           |Дата    |Исполнитель              |Проект
  -----------------------------------------------------------------------------------------------
\*************************************************************************************************/
/*
*/
#include shk_barcodeFunc.vih
#include shk_barcode_Generate.vih
#include SHK_BASE.vih
#include SHK_TEMPLATES.vih
#include shk_barcode_Print.vih

#include Algor.vih
#include StatLog.vih

#component "M_MnPlan"

table struct tmpGenShk
(
  isGen : word
, name  : string
, kol   : byte
, kod : string
)
with index
 (
  ind0 = name
 )
 ;
//#include SaldoFuncs.vih

//***********************************
VipInterface Algoritm_shk_barcode_SetParam Implements oAlgoritm_Sys #Licensed_Free;
//***********************************
#doc
Алгоритм для прикрепления файлов
#end

Interface Algoritm_shk_barcode_SetParam;
//***********************************

Var
 _TypeCpNrec : word;
 _cpNrec     : comp;
Create view
Var
 nrecFormPl    : Comp;//Настройка алгоритма
   _ShkCode
 , _log : string = '';

 _iSHK_BASE : SHK_BASE new;
 _iShk_BarcodeFunc : iShk_BarcodeFunc;
 _ishk_barcode_Generate : shk_barcode_Generate;
As Select
 FormPl.nrec
From
     FormPl
   , shk_barcodeLink
   , SHK_TSD_ARM_USER SHK_TSD
   , SHK_TSD_ARM_USER SHK_ARM
   , SHK_TSD_ARM_USER SHK_USER

Where
((
     nrecFormPl == FormPl.NRec
   and 0 == shk_barcodeLink.TYPE
   and _ShkCode == shk_barcodeLink.BARCODE
   and shk_barcodeLink.cTSD  == SHK_TSD.nrec
   and shk_barcodeLink.cARM  == SHK_ARM.nrec
   and shk_barcodeLink.cUser == SHK_USER.nrec

))
;


Procedure MyLog(_str: string);
{
 if _log  ='' then _log := GetStringParameter('Files','OutputFilesDirectory',0)+ '\Algoritm_shk_barcode_SetParam_'+DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS')+'.log';
 LogStrToFile(_log,DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS') + ': ' + shortstrtowin(_str));
}

//-------------------------
//Номер системного алгоритма
Function GetNum: Word;
{ Result := 6102;
} //Function GetNum: Word;


//-------------------------
Function GetName: String;
{ Result := 'Привязка значений ТСД-АРМ-Пользователь к документу';
}; //Function GetName: String;


//-------------------------
Function GetMemo(st: oSteckCommonString): Boolean;
{ Result := True;
  st.Push(GetName);
  st.Push('   Привязка значений ТСД-АРМ-Пользователь к документу');
}; //Function GetMemo(st: oSteckCommonString): Boolean;


//-------------------------
Function GetNameInter: String;
{ Result := 'Algoritm_shk_barcode_SetParam';
} //Function GetNameInter: String;


//-------------------------
Function GetNameInterPr: String;
{ Result := 'Algoritm_shk_barcode_SetParam_Setup';
} //Function GetNameInterPr: String;


//-------------------------
Function InitInter(Var pt: TRecAcc): Boolean;
{ #__UNUSED__(pt)
  Result := True;
} //Function InitInter(Var pt: TRecAcc): Boolean;


Window winSetParam 'Привязка ТСД-АРМ-Пользователь';
show at (,,70,10);
Screen scrSetParam 'Привязка ТСД-АРМ-Пользователь';
Fields
 _ishk_barcode_Generate.getStringObjectDescription(shk_barcodeLink.TidkGal, shk_barcodeLink.crec) : Protect;
 shk_barcodeLink.barcode                               ('Штрих код документа'          ) : Protect, NoDel;
 [SHK_TSD_name]  SHK_TSD.name + '(' +SHK_TSD.id+ ')'    ('Целевой ТСД для передачи посредством USB') : Protect, PickButton;
 [SHK_ARM_name]  SHK_ARM.name + '(' +SHK_ARM.id+ ')'    ('Целевой АРМ для передачи посредством USB') : Protect, PickButton;
 [SHK_USER_name] SHK_USER.name + '(' +SHK_USER.id+ ')' ('Целевой пользователь для передачи посредством USB') : Protect, PickButton;
Buttons
 cmCancel,,,;
<<'Привязка ТСД-АРМ-Пользователь'
Объект:.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ШК: .@@@@@@@@@@@@@@@@@@@@@@@@@@@

`         ТСД`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`         АРМ`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Пользователь`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                           <. Закрыть .>
>>
 end;
end;
windowevent winSetParam;
 cmPick: {
   case curfield of
    #SHK_TSD_name  : set shk_barcodeLink.cTSD  := _ishk_barcode_Generate.selectTSDARMUSER(1,shk_barcodeLink.cTSD);
    #SHK_ARM_name  : set shk_barcodeLink.cARM  := _ishk_barcode_Generate.selectTSDARMUSER(2,shk_barcodeLink.cARM );
    #SHK_USER_name : set shk_barcodeLink.cUser := _ishk_barcode_Generate.selectTSDARMUSER(3,shk_barcodeLink.cUser);
  end;
  update current shk_barcodeLink;
  rereadrecord;
  SaveMyDsk(shk_barcodeLink.cTSD    , 'Algoritm_shk_barcode_SetParam__cTSD' );
  SaveMyDsk(shk_barcodeLink.cARM    , 'Algoritm_shk_barcode_SetParam__cARM' );
  SaveMyDsk(shk_barcodeLink.cUser   , 'Algoritm_shk_barcode_SetParam__cUser');

 }
end;


//Запуск алгоритма
Function RunInter(wflag: Word; Var pt: TRecAcc): Boolean;
{ #__UNUSED__(wflag,pt)

  MyLog('Function RunInter(wflag: Word; Var pt: TRecAcc): Boolean;');
  Result  := false;

  set nrecFormPl := pt.cFormPl;
  if getfirst FormPl <> tsOK {
     MyLog('Не найдена настройка алгоритма ' + string(nrecFormPl,0,0));
     message('Не найдена настройка алгоритма ' + string(nrecFormPl,0,0), error);
     pt.Binding:=8;
     result := false;
     exit;
   }

  _TypeCpNrec := pt.TypeCpNrec;
  _cpNrec     := pt.cpNrec;
  var _ShkTidkGal : word = _iSHK_BASE.getShkTidkGalbyTypeCpNrec(_TypeCpNrec);
  var _wtable     : word = _iSHK_BASE.getTableCodeByViddoc(_ShkTidkGal);

  MyLog('_TypeCpNrec ' + string(_TypeCpNrec,0,0));
  MyLog('_cpNrec ' + string(_cpNrec,0,0));

  set _ShkCode := _iShk_BarcodeFunc.getCode(_wTable, _ShkTidkGal, _cpNrec, True);

  MyLog('_ShkCode ' + _ShkCode);

  if getfirst shk_barcodeLink <> tsOK then {
    MyLog('Не удалось сгенерировать ШК, обратитесь к администратору');
    message('Не удалось сгенерировать ШК, обратитесь к администратору', error);
    stop;abort;exit;
  }

  var _cTSD, _cARM, _cUser : comp = 0h;

  ReadMyDsk(_cTSD  , 'Algoritm_shk_barcode_SetParam__cTSD' , True);
  ReadMyDsk(_cARM  , 'Algoritm_shk_barcode_SetParam__cARM' , True);
  ReadMyDsk(_cUser , 'Algoritm_shk_barcode_SetParam__cUser', True);

   if shk_barcodeLink.cTSD  = 0h then set shk_barcodeLink.cTSD  := _cTSD;
   if shk_barcodeLink.cARM  = 0h then set shk_barcodeLink.cARM  := _cARM;
   if shk_barcodeLink.cUser = 0h then set shk_barcodeLink.cUser := _cUser;
  update current shk_barcodeLink;

  if getfirst SHK_TSD = tsOK {}
  if getfirst SHK_ARM  = tsOK {}
  if getfirst SHK_USER  = tsOK {}

 rereadrecord;
 MyLog('ReadMyDsk shk_barcodeLink.cTSD  = ' + string(shk_barcodeLink.cTSD ,0));
 MyLog('ReadMyDsk shk_barcodeLink.cARM  = ' + string(shk_barcodeLink.cARM ,0));
 MyLog('ReadMyDsk shk_barcodeLink.cUser = ' + string(shk_barcodeLink.cUser,0));


 MyLog('ReadMyDsk _cTSD  = ' + string(_cTSD ,0));
 MyLog('ReadMyDsk _cARM  = ' + string(_cARM ,0));
 MyLog('ReadMyDsk _cUser = ' + string(_cUser,0));

 MyLog('ReadMyDsk SHK_TSD  = ' + SHK_TSD.name );
 MyLog('ReadMyDsk SHK_ARM  = ' + SHK_ARM.name );
 MyLog('ReadMyDsk SHK_User = ' + SHK_User.name);


 rereadrecord;
 RunWindowModal(winSetParam);
 result := True;
} //Function RunInter(wflag: Word; Var pt: TRecAcc): Boolean;

End.
